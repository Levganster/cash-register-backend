generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  tgId      String    @unique
  roleId    String    @map("role_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  role      Role      @relation(fields: [roleId], references: [id], onDelete: NoAction)
  sessions  Session[]
  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  refreshToken String   @map("refresh_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([refreshToken])
  @@map("sessions")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  title           String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  users           User[]

  @@index([name])
  @@map("roles")
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Balance {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  currencyBalances CurrencyBalance[]
  transactions Transaction[]

  @@map("balances")
}

model Currency {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  symbol    String
  rate      Float    @default(1.0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  currencyBalances CurrencyBalance[]
  transactions Transaction[]

  @@map("currencies")
}

model CurrencyBalance {
  id         String   @id @default(uuid())
  balanceId  String   @map("balance_id")
  currencyId String   @map("currency_id")
  amount     BigInt   @default(0)
  balance    Balance  @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([balanceId, currencyId])
  @@index([balanceId])
  @@index([currencyId])
  @@map("currency_balances")
}

model Transaction {
  id         String   @id @default(uuid())
  type       TransactionType
  amount     BigInt
  balanceId  String   @map("balance_id")
  currencyId String   @map("currency_id")
  balance    Balance  @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@index([balanceId])
  @@index([currencyId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  SETTLEMENT
}
