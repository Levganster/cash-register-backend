import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useForm } from 'react-hook-form';
import { PlusIcon, PencilIcon, TrashIcon } from '@heroicons/react/24/outline';
import { apiClient } from '../lib/api';
import type { Balance } from '../types';

interface BalanceFormData {
  name: string;
}

export const Balances = () => {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [editingBalance, setEditingBalance] = useState<Balance | null>(null);
  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
  const {
    data: balancesResponse,
    isLoading,
    error,
  } = useQuery({
    queryKey: ['balances'],
    queryFn: () => apiClient.getBalances({}),
    retry: 1,
  });

  const createMutation = useMutation({
    mutationFn: (data: BalanceFormData) => apiClient.createBalance(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['balances'] });
      setIsCreateModalOpen(false);
      reset();
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, name }: { id: string; name: string }) =>
      apiClient.updateBalance(id, { name }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['balances'] });
      setEditingBalance(null);
      reset();
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (id: string) => apiClient.deleteBalance(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['balances'] });
    },
  });

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors },
  } = useForm<BalanceFormData>();

  const onSubmit = (data: BalanceFormData) => {
    if (editingBalance) {
      updateMutation.mutate({ id: editingBalance.id, name: data.name });
    } else {
      createMutation.mutate(data);
    }
  };

  const handleEdit = (balance: Balance) => {
    setEditingBalance(balance);
    setValue('name', balance.name);
    setIsCreateModalOpen(true);
  };

  const handleDelete = (id: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–∞–ª–∞–Ω—Å?')) {
      deleteMutation.mutate(id);
    }
  };

  const closeModal = () => {
    setIsCreateModalOpen(false);
    setEditingBalance(null);
    reset();
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <div className="text-red-600 mb-4">
          <h3 className="text-lg font-medium">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="text-sm mt-2">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã</p>
        </div>
        <button
          onClick={() =>
            queryClient.invalidateQueries({ queryKey: ['balances'] })
          }
          className="btn btn-primary"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
  const balances = Array.isArray(balancesResponse?.data?.data)
    ? balancesResponse.data.data
    : [];

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã —Å –∏–º–µ–Ω–∞–º–∏
  const validBalances = balances.filter(
    (balance): balance is Balance =>
      balance &&
      typeof balance === 'object' &&
      'id' in balance &&
      'name' in balance &&
      balance.name &&
      balance.name.trim() !== '',
  );

  return (
    <div className="space-y-6">
      <div className="sm:flex sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–ë–∞–ª–∞–Ω—Å—ã</h1>
          <p className="mt-2 text-sm text-gray-600">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
          </p>
        </div>
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="btn btn-primary"
        >
          <PlusIcon className="h-4 w-4 mr-2" />
          –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
        </button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤ */}
      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {validBalances.map((balance) => (
          <div key={balance.id} className="card">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
                  <span className="text-primary-600 font-semibold text-lg">
                    üí∞
                  </span>
                </div>
                <div className="ml-4 flex-1">
                  <h3 className="text-lg font-medium text-gray-900">
                    {balance.name}
                  </h3>
                  <p className="text-sm text-gray-500">
                    {balance.currencyBalances?.length || 0} –≤–∞–ª—é—Ç
                  </p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => handleEdit(balance)}
                  className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                >
                  <PencilIcon className="h-4 w-4" />
                </button>
                <button
                  onClick={() => handleDelete(balance.id)}
                  className="p-2 text-gray-400 hover:text-red-600 transition-colors"
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  <TrashIcon className="h-4 w-4" />
                </button>
              </div>
            </div>

            <div className="mt-4">
              <div className="text-sm text-gray-500 mb-2">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ:{' '}
                {new Date(balance.updatedAt).toLocaleDateString('ru-RU')}
              </div>

              {balance.currencyBalances &&
              balance.currencyBalances.length > 0 ? (
                <div className="space-y-1">
                  {balance.currencyBalances.slice(0, 4).map((cb: any) => (
                    <div
                      key={cb.id}
                      className="flex justify-between items-center text-sm"
                    >
                      <span className="font-medium text-gray-700">
                        {cb.currency?.code || 'N/A'}:
                      </span>
                      <span className="text-gray-900">
                        {((cb.amount || 0) / 100).toLocaleString('ru-RU', {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        })}{' '}
                        <span className="text-gray-500">
                          {cb.currency?.symbol || ''}
                        </span>
                      </span>
                    </div>
                  ))}
                  {balance.currencyBalances.length > 4 && (
                    <div className="text-xs text-gray-400 text-center pt-1">
                      +{balance.currencyBalances.length - 4} –µ—â—ë
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-sm text-gray-400 italic">
                  –ù–µ—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {validBalances.length === 0 && !isLoading && (
        <div className="text-center py-12">
          <div className="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-gray-400 text-2xl">üí∞</span>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            –ù–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤
          </h3>
          <p className="text-gray-500 mb-4">
            –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
          </p>
          <button
            onClick={() => setIsCreateModalOpen(true)}
            className="btn btn-primary"
          >
            –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
          </button>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {editingBalance ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å' : '–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å'}
              </h3>
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                  </label>
                  <input
                    type="text"
                    {...register('name', {
                      required: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
                      minLength: {
                        value: 2,
                        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
                      },
                      maxLength: {
                        value: 100,
                        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤',
                      },
                    })}
                    className="input"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞—Å—Å–∞ 1, –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç"
                    autoFocus
                  />
                  {errors.name && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.name.message}
                    </p>
                  )}
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={closeModal}
                    className="btn btn-secondary"
                    disabled={
                      createMutation.isPending || updateMutation.isPending
                    }
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    type="submit"
                    disabled={
                      createMutation.isPending || updateMutation.isPending
                    }
                    className="btn btn-primary"
                  >
                    {createMutation.isPending || updateMutation.isPending ? (
                      <div className="flex items-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                      </div>
                    ) : editingBalance ? (
                      '–û–±–Ω–æ–≤–∏—Ç—å'
                    ) : (
                      '–°–æ–∑–¥–∞—Ç—å'
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
